%{
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include "all.h"
#include "CodeGeneratorArm32.h"

extern LIST mempool;
#define ALLOC(n) List_NewLast(mempool, n)
%}
%start stm

%term imm12=1 simm8=2 imm16=16 imm5=44 imm10=39 CNSTI4=3
%term INDIRI4=4 LDR=11 STR=12
%term ADD=5 SDIV=6 MUL=7 SUB=8 RSB=14
%term CMP=15 JUMPV=9 LABELV=10 BL=20 BX=22
%term MOV=19 CLZ=17 LSR=18 LSL=42 ASR=43
%term PUSH=23 POP=24 VPUSH=40 VPOP=41
%term VMOV=26 VMUL=27 VADD=28 VSUB=29 VDIV=30
%term vcvt_signedToFloatingPoint  = 31
%term vcvt_floatingPointToSigned  = 32
%term VNEG=33 VCMP=34 VCMPz=35 VMRS=36 VSTR=37 VLDR=38

%term STRING=25 REGISTER=13 LABEL=21

%%
stm:    STR(reg,INDIRI4(reg)) = 6 (1);
stm:    STR(reg,INDIRI4(ADD(reg,reg))) = 7 (1);
stm:    STR(reg,INDIRI4(ADD(reg,imm12))) = 8 (1);
stm:    CMP(reg,reg) = 17 (1);
stm:    CMP(reg,simm8) = 18 (1);
stm:    JUMPV(CNSTI4) = 19 (1);
stm:    BL(LABELV) = 27 (1);
stm:    BX(reg) = 29 (1);
stm:    LABEL = 28;
stm:    PUSH = 30 (1);
stm:    POP = 31 (1);
stm:    STRING = 32;
stm:    VCMP(reg,reg) = 41 (1);
stm:    VCMPz(reg) = 42 (1);
stm:    VMRS = 43 (1);
stm:    VSTR(reg,INDIRI4(reg)) = 46 (1);
stm:    VSTR(reg,INDIRI4(ADD(reg,imm10))) = 47 (1);
stm:    VPUSH = 48 (1);
stm:    VPOP = 49 (1);
stm:    STR(reg,INDIRI4(ADD(reg,LSL(reg,imm5)))) = 53 (1);
stm:    CMP(reg,LSL(reg,imm5)) = 60 (1);
stm:    CMP(reg,LSR(reg,imm5)) = 61 (1);
stm:    CMP(reg,ASR(reg,imm5)) = 62 (1);

reg:    LDR(CNSTI4) = 1 (1);
reg:    LDR(INDIRI4(reg)) = 2 (1);
reg:    LDR(INDIRI4(ADD(reg,reg))) = 3 (1);
reg:    LDR(INDIRI4(ADD(reg,imm12))) = 4 (1);
reg:    LDR(LABELV) = 5 (1);
reg:    ADD(reg,reg) = 9 (1);
reg:    ADD(reg,simm8) = 10 (1);
reg:    SDIV(reg,reg) = 11 (1);
reg:    MUL(reg,reg) = 12 (1);
reg:    SUB(reg,reg) = 13 (1);
reg:    SUB(reg,simm8) = 14 (1);
reg:    ADD(MUL(reg,reg),reg) = 15 (1);
reg:    SUB(reg,MUL(reg,reg)) = 16 (1);
reg:    REGISTER = 20;
reg:    RSB(reg,reg) = 21 (1);
reg:    RSB(reg,simm8) = 22 (1);
reg:    MOV(reg) = 23 (1);
reg:    MOV(imm16) = 24 (1);
reg:    CLZ(reg) = 25 (1);
reg:    LSR(reg,imm5) = 26 (1);
reg:    VMOV(reg) = 33 (1);
reg:    VMUL(reg,reg) = 34 (1);
reg:    VADD(reg,reg) = 35 (1);
reg:    VSUB(reg,reg) = 36 (1);
reg:    VDIV(reg,reg) = 37 (1);
reg:    vcvt_signedToFloatingPoint(reg) = 38 (1);
reg:    vcvt_floatingPointToSigned(reg) = 39 (1);
reg:    VNEG(reg) = 40 (1);
reg:    VLDR(INDIRI4(reg)) = 44 (1);
reg:    VLDR(INDIRI4(ADD(reg,imm10))) = 45 (1);
reg:    LSL(reg,imm5) = 50 (1);
reg:    ASR(reg,imm5) = 51 (1);
reg:    LDR(INDIRI4(ADD(reg,LSL(reg,imm5)))) = 52 (1);
reg:    ADD(reg,LSL(reg,imm5)) = 54 (1);
reg:    ADD(reg,LSR(reg,imm5)) = 55 (1);
reg:    ADD(reg,ASR(reg,imm5)) = 56 (1);
reg:    SUB(reg,LSL(reg,imm5)) = 57 (1);
reg:    SUB(reg,LSR(reg,imm5)) = 58 (1);
reg:    SUB(reg,ASR(reg,imm5)) = 59 (1);
reg:    MOV(LSL(reg,imm5)) = 63 (1);
reg:    MOV(LSR(reg,imm5)) = 64 (1);
reg:    MOV(ASR(reg,imm5)) = 65 (1);

%%
