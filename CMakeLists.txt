cmake_minimum_required(VERSION 3.11)

# 设置工程属性，如版本，开发语言等
project(compiler VERSION 2.0 LANGUAGES C)

# 这个目前没有用处，可删除
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# 默认设置为ON，这里可注释掉。开启时会产生compile_commands.json的文件，有了这个文件才能识别出clang-tidy的配置
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# 禁止MSVC编译时出现C4819警告
if(MSVC)
    add_compile_options(/wd4819)
endif()

# 查找flex工具，找不到则出错，注意设置PATHS的路径；FLEX_EXECUTABLE记录flex程序的位置
# 请优先使用find_package，不行用find_program，指定flex的位置
# 注释下一行可查看都在哪里查找路径了
# set(CMAKE_FIND_DEBUG_MODE TRUE)
find_package(FLEX REQUIRED)

# 检查查找的flex是否是win_flex
string(FIND ${FLEX_EXECUTABLE} "win_flex.exe" result)

if(NOT ${result} EQUAL -1)
    set(WINFLEX_FOUND True)
else()
    set(WINFLEX_FOUND False)
endif()

# 查找bison工具，找不到则出错，注意设置PATHS的路径；BISON_EXECUTABLE记录bison程序的位置
# 请优先使用find_package，不行用find_program，指定bison的位置
find_package(BISON REQUIRED)

# 检查查找的flex是否是win_flex
string(FIND ${BISON_EXECUTABLE} "win_bison.exe" result)

if(NOT ${result} EQUAL -1)
    set(WINBISON_FOUND True)
else()
    set(WINBISON_FOUND False)
endif()

# 查找iburg工具，找不到则出错，注意设置PATHS的路径；IBURG_EXECUTABLE记录iburg程序的位置
find_program(IBURG_EXECUTABLE REQUIRED
    NAMES iburg
)

# flex工具的输入和输出文件
set(FLEX_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/frontend/flexbison/autogenerated)
set(FLEX_INPUT
    ${CMAKE_CURRENT_SOURCE_DIR}/frontend/flexbison/lex.l
)
set(FLEX_OUTPUT
    ${FLEX_GEN_DIR}/lex.yy.c
    ${FLEX_GEN_DIR}/lex.yy.h
)

# bison工具的输入和输出文件
set(BISON_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/frontend/flexbison/autogenerated)
set(BISON_INPUT
    ${CMAKE_CURRENT_SOURCE_DIR}/frontend/flexbison/grammar.y
)
set(BISON_OUTPUT
    ${BISON_GEN_DIR}/grammar.tab.c
    ${BISON_GEN_DIR}/grammar.tab.h
)

# iburg工具的输入和输出文件
set(IBURG_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/backend/arm32/autogenerated)
set(IBURG_INPUT
    ${CMAKE_CURRENT_SOURCE_DIR}/backend/arm32/arm32.brg
)
set(IBURG_OUTPUT
    ${IBURG_GEN_DIR}/arm32.c
)


# 前端源代码集合
set(FRONTEND_SRCS

    # 前端共性代码
    frontend/toplist.h
    frontend/tree.c

    # Flex与Bison相关代码
    ${FLEX_OUTPUT}
    ${BISON_OUTPUT}
)

# 后端源代码集合
set(BACKEND_SRCS

    # 后端共性代码
    backend/codegen.c

    # 后端产生ARM32汇编指令
    ${IBURG_OUTPUT}
    backend/arm32/InstSelectorArm32.c
    backend/arm32/CodeGeneratorArm32.c
    backend/arm32/CodeGeneratorArm32.h
    backend/arm32/ArmInst.c
    backend/arm32/linearscan.c
    backend/arm32/ra-colorize.c
)

# 中间IR源代码集合
set(IR_SRCS
    IR/IRGenerator.c
    IR/IRCode.c
    IR/IROpcode.h
    IR/IRInst.c
    IR/cfg.c
    IR/varpool.c
)

# 符号表等共通化代码集合
set(COMMON_SRCS
    common/all.h
    common/typelist.h
    common/alloc.c
    common/type.c
    common/symbol.c
)

# 系统差异性代码集合
set(UTILS_SRCS
    utils/avl.c
    utils/avl.h
    utils/bitmap.c
    utils/bitmap.h
    utils/list.c
    utils/list.h
    utils/dyn-string.c
    utils/dyn-string.h
)

# 优化源代码集合
set(OPT_SRCS
    # 静态单赋值形式
    opt/ssa.c

    # 稀疏条件常量传播
    opt/sccp.c

    # 循环优化
    opt/loop.c

    # 全局值编号
    opt/gvn.c

    # 函数内联
    opt/inline.c

    # 死代码消除
    opt/dce.c

    # 懒惰代码移动
    opt/lcm.c

    # 复写传播
    opt/copyprop.c

    # 弱强度削减
    opt/divcnst.c

    # 全局变量局部化
    opt/global-variable-localization.c

    # 运算符强度削减
    opt/osr.c

    # 循环展开
    opt/loop_unroll.c

    # 树高平衡
    opt/treeheight.c
)

# 配置创建一个可执行程序，以及该程序所依赖的所有源文件、头文件等
add_executable(${PROJECT_NAME}

    # 主程序
    main.c

    # 前端源代码
    ${FRONTEND_SRCS}

    # 后端源代码
    ${BACKEND_SRCS}

    # 符号表共性代码
    ${COMMON_SRCS}

    # 中间IR代码
    ${IR_SRCS}

    # 优化代码，暂时未用
    ${OPT_SRCS}

    # 操作系统差异化代码，VC编译时使用
    ${UTILS_SRCS}
)

# -Wno-unused-function避免无用函数警告
# -Wno-write-strings避免c++提示字符串常量转换char*的警告
# -Werror强制警告当作错误处理
# -Wall尽可能多的让编译器提示警告和错误
# __STDC_VERSION__的目的是警告产生的flex源文件出现INT8_MAX警告等
if(WIN32)
    target_compile_definitions(${PROJECT_NAME} PRIVATE _CRT_SECURE_NO_WARNINGS)
    if(CMAKE_C_COMPILER_ID MATCHES "(C|c?)lang")
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,/STACK:33554432")
    else()
        SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /STACK:33554432")
    endif()
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wno-unused-function -Wno-char-subscripts -Wno-invalid-source-encoding)
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-z,stack-size=8388608")
endif()

# 引入graphviz库的头文件，防止编译时找不到graphviz的头文件
target_include_directories(${PROJECT_NAME} PRIVATE
    common
    utils
    frontend
    frontend/flexbison
    frontend/flexbison/autogenerated
    IR
    backend
    backend/arm32
)

include(CheckFunctionExists)

if(NOT POW_FUNCTION_EXISTS AND NOT NEED_LINKING_AGAINST_LIBM)
    CHECK_FUNCTION_EXISTS(pow POW_FUNCTION_EXISTS)
    if(NOT POW_FUNCTION_EXISTS)
        unset(POW_FUNCTION_EXISTS CACHE)
        list(APPEND CMAKE_REQUIRED_LIBRARIES m)
        CHECK_FUNCTION_EXISTS(pow POW_FUNCTION_EXISTS)
        if(POW_FUNCTION_EXISTS)
            set(NEED_LINKING_AGAINST_LIBM True CACHE BOOL "" FORCE)
        else()
            message(FATAL_ERROR "Failed making the pow() function available")
        endif()
    endif()
endif()

if (NEED_LINKING_AGAINST_LIBM)
    target_link_libraries(${PROJECT_NAME} PRIVATE m)
endif()

# 采用win_flex产生词法文件时减少OS系统差异的问题
if(CMAKE_HOST_WIN32)
    if(WINFLEX_FOUND)
        set(FLEX_OPTION "--wincompat")
    else()
        set(FLEX_OPTION "--nounistd")
    endif()
endif()

# 通过flex产生词法分析源代码
add_custom_command(
    OUTPUT
    ${FLEX_OUTPUT}
    COMMAND
    ${FLEX_EXECUTABLE} ${FLEX_OPTION} -o lex.yy.c --header-file=lex.yy.h ${FLEX_INPUT}
    DEPENDS
    ${FLEX_INPUT}
    WORKING_DIRECTORY
    ${FLEX_GEN_DIR}
)

# Window版和Linux版产生头文件时选项名字不一样，根据不同系统设置
if(CMAKE_HOST_WIN32)
    if(WINBISON_FOUND)
        set(BISON_HEADFILE_OPTION "--defines")
    else()
        set(BISON_HEADFILE_OPTION "--header")
    endif()
else()
    set(BISON_HEADFILE_OPTION "--defines")
endif()

# 通过bison生成语法分析源代码
add_custom_command(
    OUTPUT
    ${BISON_OUTPUT}
    COMMAND
    ${BISON_EXECUTABLE} -d --debug -o grammar.tab.c ${BISON_HEADFILE_OPTION}=grammar.tab.h ${BISON_INPUT}
    DEPENDS
    ${BISON_INPUT}
    WORKING_DIRECTORY
    ${BISON_GEN_DIR}
)

add_custom_command(
    OUTPUT
    ${IBURG_OUTPUT}
    COMMAND
    ${IBURG_EXECUTABLE} -I -p burmArm32 ${IBURG_INPUT} arm32.c
    DEPENDS
    ${IBURG_INPUT}
    WORKING_DIRECTORY
    ${IBURG_GEN_DIR}
)
